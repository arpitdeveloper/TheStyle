'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var flamelink = _interopDefault(require('@flamelink/sdk-app'));
var sdkUtils = require('@flamelink/sdk-utils');

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

function __rest(s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
}

function __awaiter(thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

var getSettingsRefPath = function (ref) {
    return "/flamelink/settings/" + (ref || '');
};

var factory = function (context) {
    var api = {
        ref: function (ref) {
            var dbService = flamelink._ensureService('database', context);
            return dbService.ref(getSettingsRefPath(ref));
        },
        getRaw: function (_a) {
            var settingsKey = _a.settingsKey, options = __rest(_a, ["settingsKey"]);
            return sdkUtils.applyOptionsForRTDB(api.ref(settingsKey), options).once(options.event || 'value');
        },
        get: function (_a) {
            var settingsKey = _a.settingsKey, options = __rest(_a, ["settingsKey"]);
            return __awaiter(this, void 0, void 0, function () {
                var pluckFields, snapshot, value, result;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            pluckFields = sdkUtils.pluckResultFields(options.fields);
                            return [4, api.getRaw(__assign({ settingsKey: settingsKey }, options))];
                        case 1:
                            snapshot = _b.sent();
                            value = options.needsWrap && settingsKey
                                ? sdkUtils.wrap(settingsKey, snapshot.val())
                                : snapshot.val();
                            return [4, pluckFields(value)];
                        case 2:
                            result = _b.sent();
                            return [2, options.needsWrap ? sdkUtils.unwrap(settingsKey, result) : result];
                    }
                });
            });
        },
        setEnvironment: function (env) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    context.env = env;
                    return [2, env];
                });
            });
        },
        getEnvironment: function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2, context.env];
                });
            });
        },
        setLocale: function (locale) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    context.locale = locale;
                    return [2, locale];
                });
            });
        },
        getLocale: function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2, context.locale];
                });
            });
        },
        getAvailableLocales: function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2, api.get({ settingsKey: 'locales' })];
                });
            });
        },
        getGlobals: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2, api.get(__assign({}, options, { needsWrap: true, settingsKey: 'globals' }))];
                });
            });
        },
        getImageSizes: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2, api.get(__assign({}, options, { settingsKey: 'general/imageSizes' }))];
                });
            });
        },
        getDefaultPermissionsGroup: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2, api.get(__assign({}, options, { settingsKey: 'general/defaultPermissionsGroup' }))];
                });
            });
        },
        subscribeRaw: function (_a) {
            var settingsKey = _a.settingsKey, callback = _a.callback, options = __rest(_a, ["settingsKey", "callback"]);
            var filteredRef = sdkUtils.applyOptionsForRTDB(api.ref(settingsKey), options);
            filteredRef.on(options.event || 'value', function (snapshot) { return callback(null, snapshot); }, function (err) { return callback(err, null); });
            var unsubscribe = function () {
                return filteredRef.off(options.event || 'value');
            };
            return unsubscribe;
        },
        subscribe: function (_a) {
            var settingsKey = _a.settingsKey, callback = _a.callback, options = __rest(_a, ["settingsKey", "callback"]);
            var pluckFields = sdkUtils.pluckResultFields(options.fields);
            return api.subscribeRaw(__assign({ settingsKey: settingsKey }, options, { callback: function (err, snapshot) {
                    return __awaiter(this, void 0, void 0, function () {
                        var value, result;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    if (err) {
                                        return [2, callback(err, null)];
                                    }
                                    value = options.needsWrap && settingsKey
                                        ? sdkUtils.wrap(settingsKey, snapshot.val())
                                        : snapshot.val();
                                    return [4, pluckFields(value)];
                                case 1:
                                    result = _a.sent();
                                    return [2, callback(null, options.needsWrap && settingsKey
                                            ? sdkUtils.unwrap(settingsKey, result)
                                            : result)];
                            }
                        });
                    });
                } }));
        },
        subscribeGlobals: function (options) {
            return api.subscribe(__assign({}, options, { settingsKey: 'globals' }));
        },
        subscribeImageSizes: function (options) {
            return api.subscribe(__assign({}, options, { settingsKey: 'general/imageSizes' }));
        },
        subscribeDefaultPermissionsGroup: function (options) {
            return api.subscribe(__assign({}, options, { settingsKey: 'general/defaultPermissionsGroup' }));
        }
    };
    return api;
};
var register = function (context) {
    if (context.dbType === 'rtdb') {
        return factory(context);
    }
    return null;
};
flamelink._registerModule('settings', register);

exports.factory = factory;
exports.register = register;
